<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zerovox]]></title>
  <link href="http://zerovox.github.com/atom.xml" rel="self"/>
  <link href="http://zerovox.github.com/"/>
  <updated>2013-02-16T20:16:54+00:00</updated>
  <id>http://zerovox.github.com/</id>
  <author>
    <name><![CDATA[Tim Slatcher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Javascript testing in the browser with Mocha]]></title>
    <link href="http://zerovox.github.com/blog/2013/02/16/simple-backbone-testing-in-the-browser-with-mocha-and-chai/"/>
    <updated>2013-02-16T17:53:00+00:00</updated>
    <id>http://zerovox.github.com/blog/2013/02/16/simple-backbone-testing-in-the-browser-with-mocha-and-chai</id>
    <content type="html"><![CDATA[<p><a href="http://visionmedia.github.com/mocha/">Mocha</a> is a javascript test runner for Node and the browser. There&#8217;s plenty of documentation on how to set up Mocha with Node, I&#8217;m going to outline how easy it is to use Mocha in the browser too.
First we need to load the config file and then I&#8217;m using <a href="http://requirejs.org/">RequireJS</a> to load the application <code>main.js</code>. I&#8217;m using the Backbone framework here, but this will work with any application.</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Welcome!/title&gt;
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/config.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;main&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/libs/require.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By separating out the config, we can use the same config file for the main application and the testing, which helps keep out path aliases consistent. I&#8217;m going to use the <a href="http://chaijs.com/">Chai</a> testing library, which allows TDD or BDD style tests to be written using Mocha as a test runner. Mocha doesn&#8217;t export a module in the AMD style, but adding a simple shim will allow us to use it with RequireJS. We expect <a href="https://github.com/visionmedia/mocha/blob/master/mocha.js">mocha.js</a> and <a href="http://chaijs.com/chai.js">chai.js</a> to be in the <code>js/libs/</code> directory</p>

<figure class='code'><figcaption><span>js/config.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">require</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">baseUrl</span> <span class="o">:</span> <span class="s2">&quot;/js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">paths</span>   <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">underscore</span>       <span class="o">:</span> <span class="s1">&#39;libs/lodash.min&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">jquery</span>           <span class="o">:</span> <span class="s1">&#39;libs/jquery.min&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">backbone</span>         <span class="o">:</span> <span class="s1">&#39;libs/backbone.min&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">templates</span>        <span class="o">:</span> <span class="s1">&#39;../templates&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mustache</span>         <span class="o">:</span> <span class="s2">&quot;libs/mustache&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mocha</span>            <span class="o">:</span> <span class="s2">&quot;libs/mocha&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">chai</span>             <span class="o">:</span> <span class="s2">&quot;libs/chai&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">shim</span>    <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;backbone&#39;</span>       <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deps</span>    <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;underscore&#39;</span><span class="p">,</span> <span class="s1">&#39;jquery&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="nx">exports</span> <span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s1">&#39;mocha&#39;</span>         <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">exports</span> <span class="o">:</span> <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our application <code>main.js</code> doesn&#8217;t need to do anything special to use this config file, by using the variable <code>require</code> RequireJS will take care of this for us. So, for example, our basic Backbone application could look like this:</p>

<figure class='code'><figcaption><span>js/main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;router&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;views/Main&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">Router</span><span class="p">,</span> <span class="nx">MainView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">MainView</span><span class="p">().</span><span class="nx">render</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">Router</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to define our testing page, test.html. As before, we load in the config file and use RequireJS to load in <code>test.js</code>. We also have a div for mocha to fill with the test results and a stylesheet. This can be found <a href="https://github.com/visionmedia/mocha/blob/master/mocha.css">here</a>.</p>

<figure class='code'><figcaption><span>test.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Mocha Tests<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/mocha.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;mocha&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/config.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;test&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/libs/require.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our main testing application is very simple, we just load in Chai and Mocha. We set some aliases for Chai variables, allowing us to use functions like <code>should.exist(object)</code>, and then tell Mocha we want to define tests in BDD style. Then we can just use RequireJS to load in each test and run them all at once.</p>

<figure class='code'><figcaption><span>js/test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;chai&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chai</span><span class="p">,</span> <span class="nx">mocha</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assert</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">assert</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">expect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mocha</span><span class="p">.</span><span class="nx">setup</span><span class="p">(</span><span class="s1">&#39;bdd&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">require</span><span class="p">([</span><span class="s1">&#39;tests/person&#39;</span><span class="p">,</span> <span class="s1">&#39;tests/car&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">mocha</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each test is a AMD module, we can load in any AMD modules from our application such as Models, Views or Controllers from Backbone. We then define tests in the Chai BDD style.</p>

<figure class='code'><figcaption><span>tests/car.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="nx">models</span><span class="o">/</span><span class="nx">car</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">Car</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Car&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should have a speed of 0 on creation&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">Car</span><span class="p">().</span><span class="nx">speed</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should allow a make to be set on creation&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s1">&#39;Ford&#39;</span><span class="p">).</span><span class="nx">make</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Ford&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then simply navigate to our test.html page to view the results of each test.</p>
]]></content>
  </entry>
  
</feed>
